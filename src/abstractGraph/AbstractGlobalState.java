package abstractGraph;

import graph.conditions.aefdParser.AEFDFormulaFactory;

import java.util.HashMap;

import abstractGraph.conditions.Valuation;
import abstractGraph.conditions.Variable;
import abstractGraph.events.VariableChange;

public abstract class AbstractGlobalState<M extends AbstractStateMachine<S, T>, S extends AbstractState<T>, T extends AbstractTransition<S>> {

  protected Valuation variables_values;
  protected HashMap<M, S> state_machines_current_state =
      new HashMap<M, S>();

  private boolean is_legal_state = true, is_safe_state = true;
  private boolean isNotP7 = true;

  public AbstractGlobalState() {
    variables_values = new Valuation();
  }

  /**
   * Set the active state of `machine` to S.
   * 
   * @param machine
   *          The machine to modify.
   * @param S
   *          The state to set.
   */
  public void setState(M machine, S state) {
    state_machines_current_state.put(machine, state);
  }

  /**
   * Return the current state of a state machine.
   * 
   * @param machine
   * @return the current state if the state machine exists, null otherwise.
   */
  public S getState(M machine) {
    return state_machines_current_state.get(machine);
  }

  /**
   * Search for a state machine by name and return its current state.
   * 
   * @param state_machine_name
   * @return the current state if the state machine exists, null otherwise.
   */
  public S getState(String state_machine_name) {
    for (M state_machine : state_machines_current_state.keySet()) {
      if (state_machine.getName().equals(state_machine_name)) {
        return state_machines_current_state.get(state_machine);
      }
    }
    return null;
  }

  /**
   * 
   * @param variable
   * @return the value of the variable
   */
  public boolean getVariableValue(Variable variable) {
    return variables_values.getValue(variable);
  }

  /**
   * Search a variable by its name and gives its value
   * 
   * @param variable_name
   * @return
   */
  public boolean getVariableValue(String variable_name) {
    AEFDFormulaFactory factory = new AEFDFormulaFactory(true);
    VariableChange new_event = new VariableChange(factory
        .getLiteral(variable_name));
    Variable variable = new_event.getModifiedVariable();
    return variables_values.getValue(variable);
  }

  /**
   * Change the value of the variable.
   * 
   * @param variable
   * @param value
   *          the new value to assign
   * @return true if the variable changed its value, false otherwise.
   */
  public boolean setVariableValue(Variable variable, boolean value) {
    return variables_values.setValue(variable, value);
  }

  /**
   * @return the environment with the value of the variables.
   */
  public Valuation getValuation() {
    return variables_values;
  }

  public boolean isLegal() {
    return is_legal_state;
  }

  public void setIsLegal(boolean legal) {
    is_legal_state = legal;
  }

  public boolean isSafe() {
    return is_safe_state;
  }

  public void setIsSafe(boolean safe) {
    is_safe_state = safe;
  }

  public boolean isNotP7() {
    return isNotP7;
  }

  public void setNotP7(boolean NotP7) {
    isNotP7 = NotP7;
  }

  /**
   * Clear the AbstractGlobalState: it is as new as a new instance.
   */
  public void clear() {
    variables_values.clear();
    state_machines_current_state.clear();
    is_legal_state = true;
    is_safe_state = true;
  }

  @Override
  public String toString() {
    String result = "";

    for (M state_machine : state_machines_current_state.keySet()) {
      result = result + state_machine.getName()
          + " : state "
          + state_machines_current_state.get(state_machine).getId() + ".\n";
    }
    result = result + "The value of the variables are : "
        + variables_values + ".\n";
    result += "Safe: " + is_safe_state + ", legal: " + is_legal_state
        + "isNotP7: " + isNotP7;
    return result;
  }

  /**
   * The implementation make it possible to omit casts. However, all
   * implementations should simply use
   * {@link #copyTo(AbstractGlobalState, AbstractGlobalState)()}
   */
  @Override
  public abstract AbstractGlobalState<M, S, T> clone();

  /**
   * Copy A into B.
   * 
   * @param A
   * @param B
   */
  @SuppressWarnings("unchecked")
  protected void copyTo(AbstractGlobalState<M, S, T> A,
      AbstractGlobalState<M, S, T> B) {
    B.state_machines_current_state =
        (HashMap<M, S>) state_machines_current_state.clone();
    B.variables_values = (Valuation) this.variables_values.clone();
    B.is_legal_state = this.is_legal_state;
    B.is_safe_state = this.is_safe_state;
  }

  /* Automatically generated by Eclipse */
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + (is_legal_state ? 1231 : 1237);
    result = prime * result + (is_safe_state ? 1231 : 1237);
    result = prime
        * result
        + ((state_machines_current_state == null) ? 0
            : state_machines_current_state.hashCode());
    result = prime * result
        + ((variables_values == null) ? 0 : variables_values.hashCode());
    return result;
  }

  /* Automatically generated by Eclipse */
  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    @SuppressWarnings("unchecked")
    AbstractGlobalState<M, S, T> other = (AbstractGlobalState<M, S, T>) obj;
    if (is_legal_state != other.is_legal_state) {
      return false;
    }
    if (is_safe_state != other.is_safe_state) {
      return false;
    }
    if (state_machines_current_state == null) {
      if (other.state_machines_current_state != null) {
        System.out.println("3");
        return false;
      }
    } else if (!state_machines_current_state
        .equals(other.state_machines_current_state)) {
      return false;
    }
    if (variables_values == null) {
      if (other.variables_values != null) {
        return false;
      }
    } else if (!variables_values.equals(other.variables_values)) {
      return false;
    }
    return true;
  }
}
