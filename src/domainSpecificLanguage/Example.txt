/* This file is an example for the DSL syntax. 
 */
// Comments are allowed using the block or inl ine C style comments.
enumeration POSITION_AIGUILLE = { gauche, droite, inconnu };

variables
  POSITION_AIGUILLE position(inconnu);
  bool position_droite(false), position_gauche(false), test(true);
  bool zone_1_libre(true), zone_2_libre(true);
end

external events 
  aiguille_contrôlée_droite, aiguille_contrôlée_gauche;
end

internal events 
  toto1, toto2;
  toto3;
end

commands

end

machine Machine_1(inconnu)
    inconnu -> droite : on aiguille_contrôlée_droite when position is not droite do position := droite;
    gauche -> droite : on aiguille_contrôlée_droite when position is not droite do position := droite;
    inconnu -> gauche : on aiguille_contrôlée_gauche when position is droite or position is inconnu do position := gauche;
    droite -> gauche : on aiguille_contrôlée_gauche when position is droite or position is inconnu do position := gauche;
end

proof variables
  POSITION_AIGUILLE proof_1(gauche);
  bool proof_2(true), proof_3(false);
end

machine Machine_2(inconnu)
    inconnu -> droite : on toto1 when position is not droite do position := droite;
    gauche -> droite : on aiguille_contrôlée_droite when position is not droite do position := droite;
    inconnu -> gauche : on position when position is droite or position is inconnu do position := gauche;
    droite -> gauche : on toto3 when position is droite or position is inconnu do position := gauche;
end


proof internal events
  proof_event1, proof_event_2;
end

proof Machine_proof_1(0)
  0 -> 1 : on proof_1 when proof_1 is gauche do  proof_2 := true;
  0 -> 2 : on toto2 when true do proof_1 := gauche;
  0 -> 1 : on proof_event1 when true do proof_event_2;
end

